#include <iostream>
#include <cstring> // For strcpy and strlen

using namespace std;

const int MAX_LENGTH = 100; // Maximum length for name and mobile number

struct Contact {
    char name[MAX_LENGTH];
    char mobileNumber[MAX_LENGTH];
};

class Node {
public:
    Contact contact;
    Node* next;

    Node(const char* name, const char* mobileNumber) {
        strncpy(contact.name, name, MAX_LENGTH - 1);
        contact.name[MAX_LENGTH - 1] = '\0';
        strncpy(contact.mobileNumber, mobileNumber, MAX_LENGTH - 1);
        contact.mobileNumber[MAX_LENGTH - 1] = '\0';
        next = nullptr;
    }
};

class ContactList {
private:
    Node* head;

public:
    ContactList() : head(nullptr) {}

    void addAtBeg(const char* name, const char* mobileNumber) {
        Node* newNode = new Node(name, mobileNumber);
        newNode->next = head;
        head = newNode;
    }

    void append(const char* name, const char* mobileNumber) {
        Node* newNode = new Node(name, mobileNumber);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    void addAtPos(const char* name, const char* mobileNumber, int pos) {
        if (pos < 0 || pos > getLength()) {
            cout << "Invalid position!" << endl;
            return;
        }
        if (pos == 0) {
            addAtBeg(name, mobileNumber);
            return;
        }
        Node* newNode = new Node(name, mobileNumber);
        Node* temp = head;
        int currPos = 0;
        while (currPos != pos - 1) {
            temp = temp->next;
            currPos++;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << "Name: " << temp->contact.name << ", Mobile Number: " << temp->contact.mobileNumber << endl;
            temp = temp->next;
        }
    }

    void displayMore() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << "Address: " << temp;
            cout << ", Name: " << temp->contact.name;
            cout << ", Mobile Number: " << temp->contact.mobileNumber;
            cout << ", Next Address: " << temp->next << endl;
            temp = temp->next;
        }
    }

    void deleteAtStart() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    void deleteAtEnd() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            return;
        }
        Node* secondLast = head;
        while (secondLast->next->next != nullptr) {
            secondLast = secondLast->next;
        }
        Node* temp = secondLast->next;
        secondLast->next = nullptr;
        delete temp;
    }

    void deleteAtPos(int pos) {
        if (pos < 0 || pos >= getLength()) {
            cout << "Invalid position!" << endl;
            return;
        }
        if (pos == 0) {
            deleteAtStart();
            return;
        }
        Node* prev = head;
        int currPos = 0;
        while (currPos != pos - 1) {
            prev = prev->next;
            currPos++;
        }
        Node* temp = prev->next;
        prev->next = prev->next->next;
        delete temp;
    }

    int getLength() {
        Node* temp = head;
        int length = 0;
        while (temp != nullptr) {
            length++;
            temp = temp->next;
        }
        return length;
    }
};

int main() {
    ContactList contactList;

    contactList.addAtBeg("JUHI", "7987363376");
    contactList.append("DIVITA", "6261799394");
    contactList.addAtPos("MATANG", "6261769346", 1);
    
    cout << "Contact list:" << endl;
    contactList.display();

    cout << "Detailed contact info:" << endl;
    contactList.displayMore();

    contactList.deleteAtStart();
    contactList.deleteAtEnd();
    contactList.deleteAtPos(0);

    cout << "Contact list after removals:" << endl;
    contactList.display();

    return 0;
}
