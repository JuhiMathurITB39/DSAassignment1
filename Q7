#include <iostream>
using namespace std;

struct Node {
    char data;
    Node* next;

    Node(char x) : data(x), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;
    int length;

public:
    LinkedList() : head(nullptr), length(0) {}

    int getLength() {
        return length;
    }

    void addAtBeg(char x) {
        Node* newNode = new Node(x);
        newNode->next = head;
        head = newNode;
        length++;
    }

    void append(char x) {
        Node* newNode = new Node(x);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
        length++;
    }

    void addAtPOS(char x, int pos) {
        if (pos < 1 || pos > length + 1) {
            cout << "Invalid position!" << endl;
            return;
        }

        Node* newNode = new Node(x);
        if (pos == 1) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* temp = head;
            for (int i = 1; i < pos - 1; i++) {
                temp = temp->next;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }
        length++;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void displayMORE() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << "Value: " << temp->data 
                 << ", Address: " << (void*)temp 
                 << ", Next Address: " << (void*)temp->next 
                 << endl;
            temp = temp->next;
        }
    }

    void removeFirst() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        head = head->next;
        delete temp;
        length--;
    }

    void removePOS(int pos) {
        if (pos < 1 || pos > length) {
            cout << "Invalid position!" << endl;
            return;
        }

        if (pos == 1) {
            removeFirst();
        } else {
            Node* temp = head;
            for (int i = 1; i < pos - 1; i++) {
                temp = temp->next;
            }
            Node* toDelete = temp->next;
            temp->next = toDelete->next;
            delete toDelete;
            length--;
        }
    }

    ~LinkedList() {
        while (head != nullptr) {
            removeFirst();
        }
    }
};

int main() {
    LinkedList list;

    list.append('A');
    list.append('B');
    list.addAtBeg('C');
    list.addAtPOS('D', 2);

    cout << "List after operations: ";
    list.display();

    cout << "Displaying more details: " << endl;
    list.displayMORE();

    cout << "Length of list: " << list.getLength() << endl;

    list.removeFirst();
    cout << "List after removing first: ";
    list.display();

    list.removePOS(2);
    cout << "List after removing at position 2: ";
    list.display();

    cout << "Length of list: " << list.getLength() << endl;

    return 0;
}
